#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct  1 19:53:08 2018

@author: harinath
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error as mse
#scale/standardize
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
import warnings

from sklearn.exceptions import DataConversionWarning
warnings.filterwarnings(action='ignore', category=DataConversionWarning)

population_training_df = pd.read_csv('/Users/harinath/Documents/GitHub/ECEN689-Fall2018/Challenges/3Files/population_training_kaggle.csv', encoding='cp1252').dropna(axis=0)
population_training_df.drop(['Id'], axis=1, inplace=True)
population_testing_df = pd.read_csv('/Users/harinath/Documents/GitHub/ECEN689-Fall2018/Challenges/3Files/population_testing_kaggle.csv', encoding='cp1252').dropna(axis=0)
population_testing_df.drop(['Id'], axis=1, inplace=True)
print(population_training_df.shape)
print(population_testing_df.shape)

population_training_matrix = population_training_df.values
population_testing_matrix = population_testing_df.values
print(population_training_matrix.shape)
print(population_testing_matrix.shape)
train_data =population_training_matrix
test_data = population_testing_matrix

lasso = Lasso(normalize = "True", tol = 0.001, max_iter = 1e7)
year_num, country_num = train_data.shape
coefficients = []
prediction = []
i = 0  
alphas = 10 ** (np.linspace(1, 15, 2000))

while i < country_num: 
    print ("Processing Country num =  ", i)
    for a in alphas:
        x_data = train_data
        x_data = np.delete(x_data,[i],1)
       
        lasso.set_params(alpha = a)
        y_data = train_data[:,i]
        population_test_data_i = test_data[:, i]
        scaler.fit(x_data)

        # Apply transform to both the training set and the test set.
        trainX = scaler.transform(x_data)
        
        lasso.fit(trainX, y_data) 
        test_data_i=test_data
        test_data_i=np.delete(test_data_i,[i],1)
        testX = scaler.transform(test_data_i)
        population_prediction = lasso.predict(testX)
        if (np.count_nonzero(lasso.coef_) == 5):
            temp_coef = np.insert(lasso.coef_,i,0)
            coefficients.append(temp_coef)
            prediction.append(population_prediction)      
            break
    i=i+1

coef = np.transpose(coefficients)
pred = np.transpose(prediction)
print(np.shape(pred))
print(np.shape(coef))


pred_df = pd.DataFrame(data = pred)
coef_df = pd.DataFrame(data = coef)
pred_df.to_csv("population_sample_kaggle_final.csv")
coef_df.to_csv("population_parameters_final.csv")

#sns.heatmap(coef_df, annot=True, annot_kws={"size": 7})
sns.heatmap(coef_df)
#sns.plt.show()
